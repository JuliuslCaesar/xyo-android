package network.xyo.sdk;

import android.content.Context;
import android.os.Bundle;
import android.os.Debug;
import android.util.Log;

import com.google.firebase.analytics.FirebaseAnalytics;

import java.text.SimpleDateFormat;
import java.util.Locale;

/**
 * Created by arietrouw on 2/23/18.
 */

public class Base {
    public static final boolean enableExtreme = false;

    public static final SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.getDefault());

    final private static String TAG = Base.class.getSimpleName();
    private String tag() {
        return this.getClass().getSimpleName();
    }

    private static FirebaseAnalytics _firebaseAnalytics = null;

    public static void init(Context context) {
        _firebaseAnalytics = FirebaseAnalytics.getInstance(context);
        logAction(TAG, "initialized");
    }

    private static boolean isDebug() {
        return (Debug.isDebuggerConnected());
    }

    public void logException(Exception ex) {
        logException(tag(), ex);
    }

    //Any Handled Exceptions
    public static void logException(String module, Exception ex) {
        logException(module, ex);
    }

    public static void logException(String module, Exception ex, boolean reThrow) {
        logExceptionToFirebase(module, ex);
        if (isDebug()) {
            if (reThrow) {
                throw new RuntimeException(ex);
            }
        }
    }

    //Errors are conditions that should not occur but did.  These can include bad states,
    //or failed internet calls for example
    public static void logError(String module, String function, String message, boolean debug) {
        logErrorToFirebase(module, message);
        if (debug && isDebug()) {
            throw new RuntimeException();
        }
    }

    public void logError(String message) {
        logError(tag(), message, true);
    }

    public static void logError(String module, String message) {
        logError(module, message, true);
    }

    public static void logError(String module, String message, boolean debug) {
        logErrorToFirebase(module, message);

        if (debug && isDebug()) {
            throw new RuntimeException();
        }
    }

    public void logInfo(String info) {
        Base.logInfo(tag(), info);
    }

    //Normal information used for debugging.  Items should be less noisy than Extreme items
    public static void logInfo(String module, String function, String info) {
        Log.i( module + ":" + function, info);
    }

    public static void logInfo(String module, String info) {
        Log.i(module, info);
    }

    //Actions are events that are generated by the user, like pushing a button
    public static void logAction(String module, String action) {
        logActionToFirebase(module, action);
        Log.i(module, "Action: " + action);
    }

    //Items that are very noisy should use Extreme Logging
    public static void logExtreme(String module, String message) {
        Log.v(module, message);
    }

    //Status are Large Scale Events, Such As Startup, or Shutdown,
    //that may or may not be a result of a user action
    public static void logStatus(String module, String status) {
        Log.i(module, "App Status: " + status);
        logStatusToFirebase(module, status);
    }


    private static void logActionToFirebase(String module, String action) {
        if (_firebaseAnalytics != null) {
            Bundle bundle = new Bundle();
            bundle.putString("action", action);
            bundle.putString("module", module);
            _firebaseAnalytics.logEvent("xy_action", bundle);
        }
    }

    private static void logStatusToFirebase(String module, String status) {
        if (_firebaseAnalytics != null) {
            Bundle bundle = new Bundle();
            bundle.putString("status", status);
            bundle.putString("module", module);
            _firebaseAnalytics.logEvent("xy_status", bundle);
        }
    }

    private static void logErrorToFirebase(String module, String message) {
        if (_firebaseAnalytics != null) {
            Bundle bundle = new Bundle();
            bundle.putString("message", message);
            bundle.putString("module", module);
            _firebaseAnalytics.logEvent("xy_error", bundle);
        }
    }

    private static void logExceptionToFirebase(String module, Exception ex) {
        if (_firebaseAnalytics != null) {
            Bundle bundle = new Bundle();
            bundle.putString("message", ex.getMessage());
            bundle.putString("module", module);
            _firebaseAnalytics.logEvent("xy_exception", bundle);
        }
    }
}
